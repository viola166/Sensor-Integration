// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from sdk_bridge.djinni

#pragma once

#include <cstdint>
#include <utility>

namespace interaxon { namespace bridge {

/**
 * Statistics about the advertising packets that LibMuse sees from \muse2016 or later headbands.
 * \if (IOS_ONLY || WINDOWS_ONLY)
 * \warning This is only available on Android devices.
 * \endif
 */
struct AdvertisingStats final {
    /**
     * Returns the number of advertising packets seen.
     * \return the number of advertising packets seen.
     */
    int32_t numAdvertisingPackets;
    /**
     * Returns the average interval in seconds between advertising packets.
     * This is a running average since the time the statistics were created
     * or reset.
     * \return the average interval between advertising packets.
     */
    double avgAdvertisingInterval;
    /**
     * Returns the standard deviation of the average advertising interval.
     * \return the standard deviation of the average advertising interval.
     */
    double sigmaAdvertisingInterval;
    /**
     * Returns the maximum interval in seconds between receiving 2 advertising packets.
     * \return the maximum interval between advertising packets.
     */
    double maxAdvertisingInterval;
    /**
     * Indicates if the phone has lost contact with the Muse headband.
     * This is a subjective measurement.  Even if this is true, the phone
     * may still be able to connect with the headband if a connection is
     * requested.
     * \return \c true if the phone has lost contact with the headband.
     * \c false otherwise.
     */
    bool isLost;
    /**
     * Indicates an issue with the MAC address of the headband.
     *\return \c true if for some reason the MAC address of a headband has changed
     * since initial detection.  \c false under normal circumstances.
     */
    bool hasBadMac;

    AdvertisingStats(int32_t numAdvertisingPackets_,
                     double avgAdvertisingInterval_,
                     double sigmaAdvertisingInterval_,
                     double maxAdvertisingInterval_,
                     bool isLost_,
                     bool hasBadMac_)
    : numAdvertisingPackets(std::move(numAdvertisingPackets_))
    , avgAdvertisingInterval(std::move(avgAdvertisingInterval_))
    , sigmaAdvertisingInterval(std::move(sigmaAdvertisingInterval_))
    , maxAdvertisingInterval(std::move(maxAdvertisingInterval_))
    , isLost(std::move(isLost_))
    , hasBadMac(std::move(hasBadMac_))
    {}
};

} }  // namespace interaxon::bridge
