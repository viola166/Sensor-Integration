// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from muse_file.djinni

#pragma once

#include "api/bridge_annotation_format.h"
#include <string>
#include <utility>

namespace interaxon { namespace bridge {

/** A data structure that corresponds to an Annotation message in the .muse file format. */
struct AnnotationData final {
    /**
     * This is additional data for the event, can be in any format specified by
     * \classlink{AnnotationFormat}
     */
    std::string data;
    /** This specifies the string format of the event data. */
    AnnotationFormat format;
    /**
     * This can be used to classify events, for example "blink" or "error".
     * If you do not need this value, set it to the empty string "".
     */
    std::string event_type;
    /**
     * This can be used to pair events together or give them unique IDs.
     * If you do not need this value, set it to the empty string "".
     */
    std::string event_id;
    /**
     * This can be used to pair events together or give them unique IDs.
     * If you do not need this value, set it to the empty string "".
     */
    std::string parent_id;

    AnnotationData(std::string data_,
                   AnnotationFormat format_,
                   std::string event_type_,
                   std::string event_id_,
                   std::string parent_id_)
    : data(std::move(data_))
    , format(std::move(format_))
    , event_type(std::move(event_type_))
    , event_id(std::move(event_id_))
    , parent_id(std::move(parent_id_))
    {}
};

} }  // namespace interaxon::bridge
