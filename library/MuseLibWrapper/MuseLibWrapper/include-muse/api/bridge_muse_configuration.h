// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from museinfo.djinni

#pragma once

#include <cstdint>
#include <string>

namespace interaxon { namespace bridge {

enum class MuseModel;
enum class MusePreset;
enum class NotchFrequency;

/**
 * Encapsulates the configuration information of the Muse headband.<br>
 *
 * You must connect to the headband at least once to before this information
 * is available.  Once you have connected once the information will remain
 * available, even after you disconnect.
 */
class MuseConfiguration {
public:
    virtual ~MuseConfiguration() {}

    /** Provides access to current preset. */
    virtual MusePreset get_preset() const = 0;

    /**
     * The name of the headband. This is only available on \muse2016 or later.
     * \return The name of the headband.
     */
    virtual std::string get_headband_name() const = 0;

    /**
     * Unique 96 bit ID identifying the microcontroller on the headband.
     * This is only available on \muse2016 or later.
     * \return The id of the microcontroller.
     */
    virtual std::string get_microcontroller_id() const = 0;

    /**
     * Number of channels currently active.
     * \return The number of EEG channels currently active.
     */
    virtual int32_t get_eeg_channel_count() const = 0;

    /**
     * Gain to apply to incoming EEG samples.
     * \return The gain that should be applied to incoming EEG samples.
     */
    virtual int32_t get_afe_gain() const = 0;

    /**
     * EEG downsampling rate.  A value of -1 means "unknown".
     * \return The EEG downsampling rate.
     */
    virtual int32_t get_downsample_rate() const = 0;

    /**
     * Serial output mode. The relates to the size of the EEG packets transmitted
     * from the headband.  A value of 2 indicates that the packet data is
     * compressed (10 bits).  A value of 3 indicates that the packet data is
     * uncompressed (16 bits).  A value of -1 means "unknown".
     * \return \c 2 if the data is compressed, \c 3 if the data is uncompressed
     * or \c -1 if this value is unknown.
     */
    virtual int32_t get_serout_mode() const = 0;

    /**
     * The output frequency of EEG packets in Hz.
     * \return The output frequency of EEG packets.
     */
    virtual int32_t get_output_frequency() const = 0;

    /**
     * The sample frequency of EEG packets (ADC) in Hz.  A value of -1 means "unknown".
     * \return The ADC frequency of the headband.
     */
    virtual int32_t get_adc_frequency() const = 0;

    /**
     * Provides information about notch filter state (on/off).
     * \return \c true if the notch filter is enabled.  \c false if it is not.
     */
    virtual bool get_notch_filter_enabled() const = 0;

    /**
     * Provides information about notch filter frequency (50 Hz/60 Hz).
     * \return The frequency of the notch filter.
     */
    virtual NotchFrequency get_notch_filter() const = 0;

    /**
     * Returns accelerometer sample frequency in Hz.
     * \return The frequency of accelerometer samples.
     */
    virtual int32_t get_accelerometer_sample_frequency() const = 0;

    /**
     * Provides information about battery data transmission state (on/off).
     * \return \c true if the battery data transmission is enabled.
     * \c false if it is not.
     */
    virtual bool get_battery_data_enabled() const = 0;

    /**
     * Provides information about DRL/REF transmission state (on/off).
     * \return \c true if the DRL/REF data transmission is enabled.  \c false
     * if it is not.
     */
    virtual bool get_drl_ref_enabled() const = 0;

    /**
     * DRL/REF data output frequency in Hz.
     * 0 if DRL/REF is not enabled.
     * \return The frequency at which DRL/REF packets are transmitted.
     */
    virtual int32_t get_drl_ref_frequency() const = 0;

    /**
     * Returns battery charge remaining in percent.
     * \return The percentage of battery remaining.
     */
    virtual double get_battery_percent_remaining() const = 0;

    /**
     * Bluetooth MAC address reported by device.
     * \return The MAC address of the headband.
     */
    virtual std::string get_bluetooth_mac() const = 0;

    /**
     * Serial number reported by device.
     * \return The device serial number.
     */
    virtual std::string get_serial_number() const = 0;

    /**
     * Headset serial number reported by device.
     * Only applicable to Aster.
     * \return The headset serial number.
     */
    virtual std::string get_headset_serial_number() const = 0;

    /**
     * The headband model
     * \return The model of the headband.
     */
    virtual MuseModel get_model() const = 0;

    /**
     * The licensing nonce
     * \return The licensing nonce.
     */
    virtual std::string get_license_nonce() const = 0;

    /** Factory use only */
    virtual int32_t get_switch() const = 0;
};

} }  // namespace interaxon::bridge
