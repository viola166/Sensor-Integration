// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from listeners.djinni

#pragma once

#include <memory>

namespace interaxon { namespace bridge {

class MuseConfiguration;
class MuseVersion;
struct AnnotationData;
struct ComputingDeviceConfiguration;

/**
 * Implement this interface to receive annotations and configuration/version
 * info from a \classlink{ReaderMuse}
 */
class ReaderListener {
public:
    virtual ~ReaderListener() {}

    /**
     * Called once for each annotation in the file.
     * \param annotation The annotation data that was read.
     */
    virtual void receive_annotation(const AnnotationData & annotation) = 0;

    /**
     * Called each time a version packet is encountered.
     * \param version The version data that was read.
     */
    virtual void receive_version(const std::shared_ptr<MuseVersion> & version) = 0;

    /**
     * Called each time a configuration packet is encountered.
     * \param configuration The configuration data that was read.
     */
    virtual void receive_configuration(const std::shared_ptr<MuseConfiguration> & configuration) = 0;

    /**
     * Called each time a computing device packet is encountered.
     * \caseparam{computingDeviceConfiguration, computing_device_configuration, The device configuration that was read.}
     */
    virtual void receive_computing_device_configuration(const ComputingDeviceConfiguration & computing_device_configuration) = 0;
};

} }  // namespace interaxon::bridge
