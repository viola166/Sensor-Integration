// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from logging.djinni

#pragma once

#include <functional>

namespace interaxon { namespace bridge {

/** The log message severity. */
enum class Severity : int {
    /**
     * Verbose logs. These provide lots of details that are probably irrelevant
     * except for tracing or debugging problems with the headband or library.
     */
    SEV_VERBOSE,
    /**
     * Informational logs. These messages are sent when significant but expected
     * events happen (e.g. a connection started or was completed successfully.)
     */
    SEV_INFO,
    /**
     * Warning logs. These messages indicate that something out of the ordinary
     * but recoverable happened (e.g. a connection attempt failed but will be
     * retried automatically.)
     */
    SEV_WARN,
    /**
     * %Error logs. These messages indicate that something has gone wrong -- for
     * instance, a connection terminated unexpectedly or a corrupted packet was
     * received.
     */
    SEV_ERROR,
    /**
     * Fatal logs. These are sent when the library is in a completely
     * unrecoverable state from which the only reasonable outcome is termination
     * of the running process. The process will be aborted as soon as the log
     * handler returns.
     */
    SEV_FATAL,
    /**
     * Debug-only logs. These are only interesting to developers trying to track
     * down problems in the library.
     */
    SEV_DEBUG,
    /** Enum size sentinel; not an actual severity. */
    TOTAL,
};

} }  // namespace interaxon::bridge

namespace std {

template <>
struct hash<::interaxon::bridge::Severity> {
    size_t operator()(::interaxon::bridge::Severity type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};

}  // namespace std
